{"version":3,"sources":["components/Score.js","components/Cards.js","helpers.js","App.js","reportWebVitals.js","index.js"],"names":["Score","score","bestScore","className","Cards","cardsList","onClick","endMessage","onPlayAgain","map","card","i","name","src","imgLink","alt","ImgLinkCreater","Math","floor","random","createCharList","level","temp","length","alreadyOccupiedNames","characters","names","index","push","splice","returnNames","charList","forEach","App","useState","setScore","setBestScore","clickedNames","setClickedNames","message","setMessage","GameOver","_message","e","target","dataset","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAiBeA,MAff,YAAsC,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UACtB,OACE,sBAAKC,UAAU,QAAf,UACE,wCAEE,+BAAOF,OAET,qBAAKE,UAAU,OACf,6CACa,+BAAOD,W,MCkBXE,MA3Bf,YAAiE,IAAhDC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YAC/C,OACE,qBAAKL,UAAU,QAAf,SACkB,KAAfI,EACC,qBAAKJ,UAAU,mBAAf,SACGE,EAAUI,KAAI,SAACC,EAAMC,GAAP,OACb,sBACEL,QAASA,EAETH,UAAU,OACV,YAAWO,EAAKE,KAJlB,UAME,qBAAKC,IAAKH,EAAKI,QAASC,IAAKL,EAAKE,OAClC,qBAAKT,UAAU,OAAf,SAAuBO,EAAKE,SALvBD,QAUX,sBAAKR,UAAU,UAAf,UACE,6BAAKI,IACL,wBAAQD,QAASE,EAAjB,8BCDV,SAASQ,EAAeJ,GACvB,MAAM,wBAAN,OAA+BA,EAA/B,iCAA4DK,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,OAAS,QAGvF,SAASC,EAAeC,GACtC,IAAMC,EA1BP,SAAqBC,EAAQC,GAc5B,IAbA,IAAIC,EAAa,CAChB,SACA,QACA,SACA,aACA,QACA,MACA,QACA,UACA,QACA,WAEGC,EAAQ,GACHf,EAAI,EAAGA,EAAIY,EAAQZ,IAAK,CAChC,IAAMgB,EAAQV,KAAKC,MAAMD,KAAKE,SAAWM,EAAWF,QACpDG,EAAME,KAAKH,EAAWE,IACtBF,EAAWI,OAAOF,EAAO,GAE1B,OAAOD,EAOMI,CAAYT,EAAQ,GAC3BU,EAAW,GAOjB,OANAT,EAAKU,SAAQ,SAACpB,GACbmB,EAASH,KAAK,CACbhB,OACAE,QAASE,EAAeJ,QAGnBmB,EAERX,EAAe,GCKAa,MAlCf,WACE,MAAwBC,mBAAS,GAAjC,mBAAKjC,EAAL,KAAYkC,EAAZ,KACA,EAAkCD,mBAAS,GAA3C,mBAAOhC,EAAP,KAAkBkC,EAAlB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAaA,SAASC,EAASC,GAChBJ,EAAgB,IAChBH,EAAS,GACTK,EAAWE,GAKb,OACE,sBAAKvC,UAAU,MAAf,UACE,oBAAIA,UAAU,UAAd,sDACA,cAAC,EAAD,CAAOF,MAAOA,EAAOC,UAAWA,IAChC,cAAC,EAAD,CAAOG,UAAWe,EAAe,GAAId,QAxBzC,SAAqBqC,GACnB,IAAMrB,EAAOqB,EAAEC,OAAOC,QAAQjC,KAC9B,OAAMyB,EAAaS,MAAK,SAAClC,GAAD,OAAUA,IAASU,MACrCrB,EAAQC,GAAWkC,EAAanC,GAC7BwC,EAAS,aAETxC,GAAS,GACTwC,EAAS,YAElBH,EAAgB,GAAD,mBAAKD,GAAL,CAAmBf,UAClCa,EAASlC,EAAQ,KAc4CM,WAAYgC,EAAS/B,YAPpF,WACEgC,EAAW,WClBAO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.091eb27a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Score.css\";\r\nfunction Score({ score, bestScore }) {\r\n  return (\r\n    <div className=\"score\">\r\n      <h2>\r\n        Score:\r\n        <span>{score}</span>\r\n      </h2>\r\n      <div className=\"vr\"></div>\r\n      <h2>\r\n        Best Score:<span>{bestScore}</span>\r\n      </h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\nimport \"../css/Cards.css\";\r\nfunction Cards({ cardsList, onClick, endMessage, onPlayAgain }) {\r\n  return (\r\n    <div className=\"cards\">\r\n      {endMessage === \"\" ? (\r\n        <div className=\"cards__container\">\r\n          {cardsList.map((card, i) => (\r\n            <div\r\n              onClick={onClick}\r\n              key={i}\r\n              className=\"card\"\r\n              data-name={card.name}\r\n            >\r\n              <img src={card.imgLink} alt={card.name} />\r\n              <div className=\"name\">{card.name}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"message\">\r\n          <h2>{endMessage}</h2>\r\n          <button onClick={onPlayAgain}>Play Again</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","function returnNames(length, alreadyOccupiedNames) {\r\n let characters = [\r\n  'Awilda',\r\n  'Chloe',\r\n  'Debbra',\r\n  'Bernardina',\r\n  'Kenia',\r\n  'ian',\r\n  'Annie',\r\n  'Rosario',\r\n  'Ashli',\r\n  'Bennett'\r\n ];\r\n let names = [];\r\n for (let i = 0; i < length; i++) {\r\n  const index = Math.floor(Math.random() * characters.length);\r\n  names.push(characters[index]);\r\n  characters.splice(index, 1);\r\n }\r\n return names;\r\n}\r\nfunction ImgLinkCreater(name) {\r\n return `https://robohash.org/${name}.png?size=150x150&set=${Math.floor(Math.random() * 2) ? 'set1' : 'set2'}`;\r\n}\r\n\r\nexport default function createCharList(level) {\r\n const temp = returnNames(level + 4);\r\n const charList = [];\r\n temp.forEach((name) => {\r\n  charList.push({\r\n   name,\r\n   imgLink: ImgLinkCreater(name)\r\n  });\r\n });\r\n return charList;\r\n}\r\ncreateCharList(1);","import { useState } from 'react';\nimport './css/App.css';\n// import { returnNames } from './helpers';\nimport Score from './components/Score';\nimport Cards from './components/Cards';\nimport createCharList from './helpers';\n\nfunction App() {\n  let [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [clickedNames, setClickedNames] = useState([]);\n  const [message, setMessage] = useState('');\n  function onCardClick(e) {\n    const temp = e.target.dataset.name;\n    if (!!clickedNames.find((name) => name === temp)) {\n      if (score > bestScore) setBestScore(score);\n      return GameOver('You Lose');\n    }\n    else if (score >= 10) {\n      return GameOver('You Win');\n    }\n    setClickedNames([...clickedNames, temp]);\n    setScore(score + 1);\n  }\n  function GameOver(_message) {\n    setClickedNames([]);\n    setScore(0);\n    setMessage(_message);\n  }\n  function onPlayAgainClick() {\n    setMessage('');\n  }\n  return (\n    <div className=\"App\">\n      <h1 className=\"heading\"> ðŸ¤–  MEMORY GAME ðŸ¤– </h1>\n      <Score score={score} bestScore={bestScore} />\n      <Cards cardsList={createCharList(6)} onClick={onCardClick} endMessage={message} onPlayAgain={onPlayAgainClick} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}